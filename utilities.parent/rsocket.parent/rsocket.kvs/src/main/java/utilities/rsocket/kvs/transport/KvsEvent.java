package utilities.rsocket.kvs.transport;


// Code generated by colf(1); DO NOT EDIT.


import static java.lang.String.format;
import java.io.IOException;
import java.io.InputStream;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectStreamException;
import java.io.OutputStream;
import java.io.Serializable;
import java.nio.charset.StandardCharsets;
import java.util.InputMismatchException;
import java.nio.BufferOverflowException;
import java.nio.BufferUnderflowException;


/**
 * Data bean with built-in serialization support.

 * @author generated by colf(1)
 * @see <a href="https://github.com/pascaldekloe/colfer">Colfer's home</a>
 */
@javax.annotation.Generated(value="colf(1)", comments="Colfer from schema file transport.colf")
public class KvsEvent extends utilities.rsocket.kvs.ColferObject implements Serializable {

	/** The upper limit for serial byte sizes. */
	public static int colferSizeMax = 16 * 1024 * 1024;

	/** The upper limit for the number of elements in a list. */
	public static int colferListMax = 64 * 1024;




	public int kvs;

	public String name;

	public String properties;

	public byte[] key;

	public byte[] value;

	public byte[] expected;

	public byte[][] keys;

	public KvsEntry[] updates;


	/** Default constructor */
	public KvsEvent() {
		init();
	}

	private static final byte[] _zeroBytes = new byte[0];
	private static final byte[][] _zeroBinaries = new byte[0][];
	private static final KvsEntry[] _zeroUpdates = new KvsEntry[0];

	/** Colfer zero values. */
	private void init() {
		name = "";
		properties = "";
		key = _zeroBytes;
		value = _zeroBytes;
		expected = _zeroBytes;
		keys = _zeroBinaries;
		updates = _zeroUpdates;
	}

	/**
	 * {@link #reset(InputStream) Reusable} deserialization of Colfer streams.
	 */
	public static class Unmarshaller {

		/** The data source. */
		protected InputStream in;

		/** The read buffer. */
		public byte[] buf;

		/** The {@link #buf buffer}'s data start index, inclusive. */
		protected int offset;

		/** The {@link #buf buffer}'s data end index, exclusive. */
		protected int i;


		/**
		 * @param in the data source or {@code null}.
		 * @param buf the initial buffer or {@code null}.
		 */
		public Unmarshaller(InputStream in, byte[] buf) {
			// TODO: better size estimation
			if (buf == null || buf.length == 0)
				buf = new byte[Math.min(KvsEvent.colferSizeMax, 2048)];
			this.buf = buf;
			reset(in);
		}

		/**
		 * Reuses the marshaller.
		 * @param in the data source or {@code null}.
		 * @throws IllegalStateException on pending data.
		 */
		public void reset(InputStream in) {
			if (this.i != this.offset) throw new IllegalStateException("colfer: pending data");
			this.in = in;
			this.offset = 0;
			this.i = 0;
		}

		/**
		 * Deserializes the following object.
		 * @return the result or {@code null} when EOF.
		 * @throws IOException from the input stream.
		 * @throws SecurityException on an upper limit breach defined by either {@link #colferSizeMax} or {@link #colferListMax}.
		 * @throws InputMismatchException when the data does not match this object's schema.
		 */
		public KvsEvent next() throws IOException {
			if (in == null) return null;

			while (true) {
				if (this.i > this.offset) {
					try {
						KvsEvent o = new KvsEvent();
						this.offset = o.unmarshal(this.buf, this.offset, this.i);
						return o;
					} catch (BufferUnderflowException e) {
					}
				}
				// not enough data

				if (this.i <= this.offset) {
					this.offset = 0;
					this.i = 0;
				} else if (i == buf.length) {
					byte[] src = this.buf;
					// TODO: better size estimation
					if (offset == 0) this.buf = new byte[Math.min(KvsEvent.colferSizeMax, this.buf.length * 4)];
					System.arraycopy(src, this.offset, this.buf, 0, this.i - this.offset);
					this.i -= this.offset;
					this.offset = 0;
				}
				assert this.i < this.buf.length;

				int n = in.read(buf, i, buf.length - i);
				if (n < 0) {
					if (this.i > this.offset)
						throw new InputMismatchException("colfer: pending data with EOF");
					return null;
				}
				assert n > 0;
				i += n;
			}
		}

	}


	/**
	 * Serializes the object.
	 * All {@code null} elements in {@link #keys} will be replaced with an empty byte array.
	 * All {@code null} elements in {@link #updates} will be replaced with a {@code new} value.
	 * @param out the data destination.
	 * @param buf the initial buffer or {@code null}.
	 * @return the final buffer. When the serial fits into {@code buf} then the return is {@code buf}.
	 *  Otherwise the return is a new buffer, large enough to hold the whole serial.
	 * @throws IOException from {@code out}.
	 * @throws IllegalStateException on an upper limit breach defined by either {@link #colferSizeMax} or {@link #colferListMax}.
	 */
	public byte[] marshal(OutputStream out, byte[] buf) throws IOException {
		// TODO: better size estimation
		if (buf == null || buf.length == 0)
			buf = new byte[Math.min(KvsEvent.colferSizeMax, 2048)];

		while (true) {
			int i;
			try {
				i = marshal(buf, 0);
			} catch (BufferOverflowException e) {
				buf = new byte[Math.min(KvsEvent.colferSizeMax, buf.length * 4)];
				continue;
			}

			out.write(buf, 0, i);
			return buf;
		}
	}

	/**
	 * Serializes the object.
	 * All {@code null} elements in {@link #keys} will be replaced with an empty byte array.
	 * All {@code null} elements in {@link #updates} will be replaced with a {@code new} value.
	 * @param buf the data destination.
	 * @param offset the initial index for {@code buf}, inclusive.
	 * @return the final index for {@code buf}, exclusive.
	 * @throws BufferOverflowException when {@code buf} is too small.
	 * @throws IllegalStateException on an upper limit breach defined by either {@link #colferSizeMax} or {@link #colferListMax}.
	 */
	public int marshal(byte[] buf, int offset) {
		int i = offset;

		try {
			if (this.kvs != 0) {
				int x = this.kvs;
				if ((x & ~((1 << 21) - 1)) != 0) {
					buf[i++] = (byte) (0 | 0x80);
					buf[i++] = (byte) (x >>> 24);
					buf[i++] = (byte) (x >>> 16);
					buf[i++] = (byte) (x >>> 8);
				} else {
					buf[i++] = (byte) 0;
					while (x > 0x7f) {
						buf[i++] = (byte) (x | 0x80);
						x >>>= 7;
					}
				}
				buf[i++] = (byte) x;
			}

			if (! this.name.isEmpty()) {
				buf[i++] = (byte) 1;
				int start = ++i;

				String s = this.name;
				for (int sIndex = 0, sLength = s.length(); sIndex < sLength; sIndex++) {
					char c = s.charAt(sIndex);
					if (c < '\u0080') {
						buf[i++] = (byte) c;
					} else if (c < '\u0800') {
						buf[i++] = (byte) (192 | c >>> 6);
						buf[i++] = (byte) (128 | c & 63);
					} else if (c < '\ud800' || c > '\udfff') {
						buf[i++] = (byte) (224 | c >>> 12);
						buf[i++] = (byte) (128 | c >>> 6 & 63);
						buf[i++] = (byte) (128 | c & 63);
					} else {
						int cp = 0;
						if (++sIndex < sLength) cp = Character.toCodePoint(c, s.charAt(sIndex));
						if ((cp >= 1 << 16) && (cp < 1 << 21)) {
							buf[i++] = (byte) (240 | cp >>> 18);
							buf[i++] = (byte) (128 | cp >>> 12 & 63);
							buf[i++] = (byte) (128 | cp >>> 6 & 63);
							buf[i++] = (byte) (128 | cp & 63);
						} else
							buf[i++] = (byte) '?';
					}
				}
				int size = i - start;
				if (size > KvsEvent.colferSizeMax)
					throw new IllegalStateException(format("colfer: utilities/rsocket/kvs/transport.kvsEvent.name size %d exceeds %d UTF-8 bytes", size, KvsEvent.colferSizeMax));

				int ii = start - 1;
				if (size > 0x7f) {
					i++;
					for (int x = size; x >= 1 << 14; x >>>= 7) i++;
					System.arraycopy(buf, start, buf, i - size, size);

					do {
						buf[ii++] = (byte) (size | 0x80);
						size >>>= 7;
					} while (size > 0x7f);
				}
				buf[ii] = (byte) size;
			}

			if (! this.properties.isEmpty()) {
				buf[i++] = (byte) 2;
				int start = ++i;

				String s = this.properties;
				for (int sIndex = 0, sLength = s.length(); sIndex < sLength; sIndex++) {
					char c = s.charAt(sIndex);
					if (c < '\u0080') {
						buf[i++] = (byte) c;
					} else if (c < '\u0800') {
						buf[i++] = (byte) (192 | c >>> 6);
						buf[i++] = (byte) (128 | c & 63);
					} else if (c < '\ud800' || c > '\udfff') {
						buf[i++] = (byte) (224 | c >>> 12);
						buf[i++] = (byte) (128 | c >>> 6 & 63);
						buf[i++] = (byte) (128 | c & 63);
					} else {
						int cp = 0;
						if (++sIndex < sLength) cp = Character.toCodePoint(c, s.charAt(sIndex));
						if ((cp >= 1 << 16) && (cp < 1 << 21)) {
							buf[i++] = (byte) (240 | cp >>> 18);
							buf[i++] = (byte) (128 | cp >>> 12 & 63);
							buf[i++] = (byte) (128 | cp >>> 6 & 63);
							buf[i++] = (byte) (128 | cp & 63);
						} else
							buf[i++] = (byte) '?';
					}
				}
				int size = i - start;
				if (size > KvsEvent.colferSizeMax)
					throw new IllegalStateException(format("colfer: utilities/rsocket/kvs/transport.kvsEvent.properties size %d exceeds %d UTF-8 bytes", size, KvsEvent.colferSizeMax));

				int ii = start - 1;
				if (size > 0x7f) {
					i++;
					for (int x = size; x >= 1 << 14; x >>>= 7) i++;
					System.arraycopy(buf, start, buf, i - size, size);

					do {
						buf[ii++] = (byte) (size | 0x80);
						size >>>= 7;
					} while (size > 0x7f);
				}
				buf[ii] = (byte) size;
			}

			if (this.key.length != 0) {
				buf[i++] = (byte) 3;

				int size = this.key.length;
				if (size > KvsEvent.colferSizeMax)
					throw new IllegalStateException(format("colfer: utilities/rsocket/kvs/transport.kvsEvent.key size %d exceeds %d bytes", size, KvsEvent.colferSizeMax));

				int x = size;
				while (x > 0x7f) {
					buf[i++] = (byte) (x | 0x80);
					x >>>= 7;
				}
				buf[i++] = (byte) x;

				int start = i;
				i += size;
				System.arraycopy(this.key, 0, buf, start, size);
			}

			if (this.value.length != 0) {
				buf[i++] = (byte) 4;

				int size = this.value.length;
				if (size > KvsEvent.colferSizeMax)
					throw new IllegalStateException(format("colfer: utilities/rsocket/kvs/transport.kvsEvent.value size %d exceeds %d bytes", size, KvsEvent.colferSizeMax));

				int x = size;
				while (x > 0x7f) {
					buf[i++] = (byte) (x | 0x80);
					x >>>= 7;
				}
				buf[i++] = (byte) x;

				int start = i;
				i += size;
				System.arraycopy(this.value, 0, buf, start, size);
			}

			if (this.expected.length != 0) {
				buf[i++] = (byte) 5;

				int size = this.expected.length;
				if (size > KvsEvent.colferSizeMax)
					throw new IllegalStateException(format("colfer: utilities/rsocket/kvs/transport.kvsEvent.expected size %d exceeds %d bytes", size, KvsEvent.colferSizeMax));

				int x = size;
				while (x > 0x7f) {
					buf[i++] = (byte) (x | 0x80);
					x >>>= 7;
				}
				buf[i++] = (byte) x;

				int start = i;
				i += size;
				System.arraycopy(this.expected, 0, buf, start, size);
			}

			if (this.keys.length != 0) {
				buf[i++] = (byte) 6;
				byte[][] a = this.keys;

				int x = a.length;
				if (x > KvsEvent.colferListMax)
					throw new IllegalStateException(format("colfer: utilities/rsocket/kvs/transport.kvsEvent.keys length %d exceeds %d elements", x, KvsEvent.colferListMax));
				while (x > 0x7f) {
					buf[i++] = (byte) (x | 0x80);
					x >>>= 7;
				}
				buf[i++] = (byte) x;

				for (int ai = 0; ai < a.length; ai++) {
					byte[] b = a[ai];
					if (b == null) {
						b = _zeroBytes;
						a[ai] = b;
					}
					if (b.length > KvsEvent.colferSizeMax)
						throw new IllegalStateException(format("colfer: utilities/rsocket/kvs/transport.kvsEvent.keys[%d] size %d exceeds %d bytes", ai, b.length, KvsEvent.colferSizeMax));

					x = b.length;
					while (x > 0x7f) {
						buf[i++] = (byte) (x | 0x80);
						x >>>= 7;
					}
					buf[i++] = (byte) x;

					int start = i;
					i += b.length;
					System.arraycopy(b, 0, buf, start, b.length);
				}
			}

			if (this.updates.length != 0) {
				buf[i++] = (byte) 7;
				KvsEntry[] a = this.updates;

				int x = a.length;
				if (x > KvsEvent.colferListMax)
					throw new IllegalStateException(format("colfer: utilities/rsocket/kvs/transport.kvsEvent.updates length %d exceeds %d elements", x, KvsEvent.colferListMax));
				while (x > 0x7f) {
					buf[i++] = (byte) (x | 0x80);
					x >>>= 7;
				}
				buf[i++] = (byte) x;

				for (int ai = 0; ai < a.length; ai++) {
					KvsEntry o = a[ai];
					if (o == null) {
						o = new KvsEntry();
						a[ai] = o;
					}
					i = o.marshal(buf, i);
				}
			}

			buf[i++] = (byte) 0x7f;
			return i;
		} catch (ArrayIndexOutOfBoundsException e) {
			if (i - offset > KvsEvent.colferSizeMax)
				throw new IllegalStateException(format("colfer: utilities/rsocket/kvs/transport.kvsEvent exceeds %d bytes", KvsEvent.colferSizeMax));
			if (i > buf.length) throw new BufferOverflowException();
			throw e;
		}
	}

	/**
	 * Deserializes the object.
	 * @param buf the data source.
	 * @param offset the initial index for {@code buf}, inclusive.
	 * @return the final index for {@code buf}, exclusive.
	 * @throws BufferUnderflowException when {@code buf} is incomplete. (EOF)
	 * @throws SecurityException on an upper limit breach defined by either {@link #colferSizeMax} or {@link #colferListMax}.
	 * @throws InputMismatchException when the data does not match this object's schema.
	 */
	public int unmarshal(byte[] buf, int offset) {
		return unmarshal(buf, offset, buf.length);
	}

	/**
	 * Deserializes the object.
	 * @param buf the data source.
	 * @param offset the initial index for {@code buf}, inclusive.
	 * @param end the index limit for {@code buf}, exclusive.
	 * @return the final index for {@code buf}, exclusive.
	 * @throws BufferUnderflowException when {@code buf} is incomplete. (EOF)
	 * @throws SecurityException on an upper limit breach defined by either {@link #colferSizeMax} or {@link #colferListMax}.
	 * @throws InputMismatchException when the data does not match this object's schema.
	 */
	public int unmarshal(byte[] buf, int offset, int end) {
		if (end > buf.length) end = buf.length;
		int i = offset;

		try {
			byte header = buf[i++];

			if (header == (byte) 0) {
				int x = 0;
				for (int shift = 0; true; shift += 7) {
					byte b = buf[i++];
					x |= (b & 0x7f) << shift;
					if (shift == 28 || b >= 0) break;
				}
				this.kvs = x;
				header = buf[i++];
			} else if (header == (byte) (0 | 0x80)) {
				this.kvs = (buf[i++] & 0xff) << 24 | (buf[i++] & 0xff) << 16 | (buf[i++] & 0xff) << 8 | (buf[i++] & 0xff);
				header = buf[i++];
			}

			if (header == (byte) 1) {
				int size = 0;
				for (int shift = 0; true; shift += 7) {
					byte b = buf[i++];
					size |= (b & 0x7f) << shift;
					if (shift == 28 || b >= 0) break;
				}
				if (size < 0 || size > KvsEvent.colferSizeMax)
					throw new SecurityException(format("colfer: utilities/rsocket/kvs/transport.kvsEvent.name size %d exceeds %d UTF-8 bytes", size, KvsEvent.colferSizeMax));

				int start = i;
				i += size;
				this.name = new String(buf, start, size, StandardCharsets.UTF_8);
				header = buf[i++];
			}

			if (header == (byte) 2) {
				int size = 0;
				for (int shift = 0; true; shift += 7) {
					byte b = buf[i++];
					size |= (b & 0x7f) << shift;
					if (shift == 28 || b >= 0) break;
				}
				if (size < 0 || size > KvsEvent.colferSizeMax)
					throw new SecurityException(format("colfer: utilities/rsocket/kvs/transport.kvsEvent.properties size %d exceeds %d UTF-8 bytes", size, KvsEvent.colferSizeMax));

				int start = i;
				i += size;
				this.properties = new String(buf, start, size, StandardCharsets.UTF_8);
				header = buf[i++];
			}

			if (header == (byte) 3) {
				int size = 0;
				for (int shift = 0; true; shift += 7) {
					byte b = buf[i++];
					size |= (b & 0x7f) << shift;
					if (shift == 28 || b >= 0) break;
				}
				if (size < 0 || size > KvsEvent.colferSizeMax)
					throw new SecurityException(format("colfer: utilities/rsocket/kvs/transport.kvsEvent.key size %d exceeds %d bytes", size, KvsEvent.colferSizeMax));

				this.key = new byte[size];
				int start = i;
				i += size;
				System.arraycopy(buf, start, this.key, 0, size);

				header = buf[i++];
			}

			if (header == (byte) 4) {
				int size = 0;
				for (int shift = 0; true; shift += 7) {
					byte b = buf[i++];
					size |= (b & 0x7f) << shift;
					if (shift == 28 || b >= 0) break;
				}
				if (size < 0 || size > KvsEvent.colferSizeMax)
					throw new SecurityException(format("colfer: utilities/rsocket/kvs/transport.kvsEvent.value size %d exceeds %d bytes", size, KvsEvent.colferSizeMax));

				this.value = new byte[size];
				int start = i;
				i += size;
				System.arraycopy(buf, start, this.value, 0, size);

				header = buf[i++];
			}

			if (header == (byte) 5) {
				int size = 0;
				for (int shift = 0; true; shift += 7) {
					byte b = buf[i++];
					size |= (b & 0x7f) << shift;
					if (shift == 28 || b >= 0) break;
				}
				if (size < 0 || size > KvsEvent.colferSizeMax)
					throw new SecurityException(format("colfer: utilities/rsocket/kvs/transport.kvsEvent.expected size %d exceeds %d bytes", size, KvsEvent.colferSizeMax));

				this.expected = new byte[size];
				int start = i;
				i += size;
				System.arraycopy(buf, start, this.expected, 0, size);

				header = buf[i++];
			}

			if (header == (byte) 6) {
				int length = 0;
				for (int shift = 0; true; shift += 7) {
					byte b = buf[i++];
					length |= (b & 0x7f) << shift;
					if (shift == 28 || b >= 0) break;
				}
				if (length < 0 || length > KvsEvent.colferListMax)
					throw new SecurityException(format("colfer: utilities/rsocket/kvs/transport.kvsEvent.keys length %d exceeds %d elements", length, KvsEvent.colferListMax));

				byte[][] a = new byte[length][];
				for (int ai = 0; ai < length; ai++) {
					int size = 0;
					for (int shift = 0; true; shift += 7) {
						byte b = buf[i++];
						size |= (b & 0x7f) << shift;
						if (shift == 28 || b >= 0) break;
					}
					if (size < 0 || size > KvsEvent.colferSizeMax)
						throw new SecurityException(format("colfer: utilities/rsocket/kvs/transport.kvsEvent.keys[%d] size %d exceeds %d bytes", ai, size, KvsEvent.colferSizeMax));

					byte[] e = new byte[size];
					int start = i;
					i += size;
					System.arraycopy(buf, start, e, 0, size);
					a[ai] = e;
				}
				this.keys = a;

				header = buf[i++];
			}

			if (header == (byte) 7) {
				int length = 0;
				for (int shift = 0; true; shift += 7) {
					byte b = buf[i++];
					length |= (b & 0x7f) << shift;
					if (shift == 28 || b >= 0) break;
				}
				if (length < 0 || length > KvsEvent.colferListMax)
					throw new SecurityException(format("colfer: utilities/rsocket/kvs/transport.kvsEvent.updates length %d exceeds %d elements", length, KvsEvent.colferListMax));

				KvsEntry[] a = new KvsEntry[length];
				for (int ai = 0; ai < length; ai++) {
					KvsEntry o = new KvsEntry();
					i = o.unmarshal(buf, i, end);
					a[ai] = o;
				}
				this.updates = a;
				header = buf[i++];
			}

			if (header != (byte) 0x7f)
				throw new InputMismatchException(format("colfer: unknown header at byte %d", i - 1));
		} finally {
			if (i > end && end - offset < KvsEvent.colferSizeMax) throw new BufferUnderflowException();
			if (i < 0 || i - offset > KvsEvent.colferSizeMax)
				throw new SecurityException(format("colfer: utilities/rsocket/kvs/transport.kvsEvent exceeds %d bytes", KvsEvent.colferSizeMax));
			if (i > end) throw new BufferUnderflowException();
		}

		return i;
	}

	// {@link Serializable} version number.
	private static final long serialVersionUID = 8L;

	// {@link Serializable} Colfer extension.
	private void writeObject(ObjectOutputStream out) throws IOException {
		// TODO: better size estimation
		byte[] buf = new byte[1024];
		int n;
		while (true) try {
			n = marshal(buf, 0);
			break;
		} catch (BufferUnderflowException e) {
			buf = new byte[4 * buf.length];
		}

		out.writeInt(n);
		out.write(buf, 0, n);
	}

	// {@link Serializable} Colfer extension.
	private void readObject(ObjectInputStream in) throws ClassNotFoundException, IOException {
		init();

		int n = in.readInt();
		byte[] buf = new byte[n];
		in.readFully(buf);
		unmarshal(buf, 0);
	}

	// {@link Serializable} Colfer extension.
	private void readObjectNoData() throws ObjectStreamException {
		init();
	}

	/**
	 * Gets utilities/rsocket/kvs/transport.kvsEvent.kvs.
	 * @return the value.
	 */
	public int getKvs() {
		return this.kvs;
	}

	/**
	 * Sets utilities/rsocket/kvs/transport.kvsEvent.kvs.
	 * @param value the replacement.
	 */
	public void setKvs(int value) {
		this.kvs = value;
	}

	/**
	 * Gets utilities/rsocket/kvs/transport.kvsEvent.name.
	 * @return the value.
	 */
	public String getName() {
		return this.name;
	}

	/**
	 * Sets utilities/rsocket/kvs/transport.kvsEvent.name.
	 * @param value the replacement.
	 */
	public void setName(String value) {
		this.name = value;
	}

	/**
	 * Gets utilities/rsocket/kvs/transport.kvsEvent.properties.
	 * @return the value.
	 */
	public String getProperties() {
		return this.properties;
	}

	/**
	 * Sets utilities/rsocket/kvs/transport.kvsEvent.properties.
	 * @param value the replacement.
	 */
	public void setProperties(String value) {
		this.properties = value;
	}

	/**
	 * Gets utilities/rsocket/kvs/transport.kvsEvent.key.
	 * @return the value.
	 */
	public byte[] getKey() {
		return this.key;
	}

	/**
	 * Sets utilities/rsocket/kvs/transport.kvsEvent.key.
	 * @param value the replacement.
	 */
	public void setKey(byte[] value) {
		this.key = value;
	}

	/**
	 * Gets utilities/rsocket/kvs/transport.kvsEvent.value.
	 * @return the value.
	 */
	public byte[] getValue() {
		return this.value;
	}

	/**
	 * Sets utilities/rsocket/kvs/transport.kvsEvent.value.
	 * @param value the replacement.
	 */
	public void setValue(byte[] value) {
		this.value = value;
	}

	/**
	 * Gets utilities/rsocket/kvs/transport.kvsEvent.expected.
	 * @return the value.
	 */
	public byte[] getExpected() {
		return this.expected;
	}

	/**
	 * Sets utilities/rsocket/kvs/transport.kvsEvent.expected.
	 * @param value the replacement.
	 */
	public void setExpected(byte[] value) {
		this.expected = value;
	}

	/**
	 * Gets utilities/rsocket/kvs/transport.kvsEvent.keys.
	 * @return the value.
	 */
	public byte[][] getKeys() {
		return this.keys;
	}

	/**
	 * Sets utilities/rsocket/kvs/transport.kvsEvent.keys.
	 * @param value the replacement.
	 */
	public void setKeys(byte[][] value) {
		this.keys = value;
	}

	/**
	 * Gets utilities/rsocket/kvs/transport.kvsEvent.updates.
	 * @return the value.
	 */
	public KvsEntry[] getUpdates() {
		return this.updates;
	}

	/**
	 * Sets utilities/rsocket/kvs/transport.kvsEvent.updates.
	 * @param value the replacement.
	 */
	public void setUpdates(KvsEntry[] value) {
		this.updates = value;
	}

	@Override
	public final int hashCode() {
		int h = 1;
		h = 31 * h + this.kvs;
		if (this.name != null) h = 31 * h + this.name.hashCode();
		if (this.properties != null) h = 31 * h + this.properties.hashCode();
		for (byte b : this.key) h = 31 * h + b;
		for (byte b : this.value) h = 31 * h + b;
		for (byte b : this.expected) h = 31 * h + b;
		for (byte[] b : this.keys) h = 31 * h + java.util.Arrays.hashCode(b);
		for (KvsEntry o : this.updates) h = 31 * h + (o == null ? 0 : o.hashCode());
		return h;
	}

	@Override
	public final boolean equals(Object o) {
		return o instanceof KvsEvent && equals((KvsEvent) o);
	}

	public final boolean equals(KvsEvent o) {
		if (o == null) return false;
		if (o == this) return true;
		return o.getClass() == KvsEvent.class
			&& this.kvs == o.kvs
			&& (this.name == null ? o.name == null : this.name.equals(o.name))
			&& (this.properties == null ? o.properties == null : this.properties.equals(o.properties))
			&& java.util.Arrays.equals(this.key, o.key)
			&& java.util.Arrays.equals(this.value, o.value)
			&& java.util.Arrays.equals(this.expected, o.expected)
			&& _equals(this.keys, o.keys)
			&& java.util.Arrays.equals(this.updates, o.updates);
	}

	private static boolean _equals(byte[][] a, byte[][] b) {
		if (a == b) return true;
		if (a == null || b == null) return false;

		int i = a.length;
		if (i != b.length) return false;

		while (--i >= 0) if (! java.util.Arrays.equals(a[i], b[i])) return false;
		return true;
	}

}
